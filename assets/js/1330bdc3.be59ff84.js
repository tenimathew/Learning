"use strict";(self.webpackChunklearning=self.webpackChunklearning||[]).push([[499],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(r),m=o,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return r?n.createElement(f,i(i({ref:t},p),{},{components:r})):n.createElement(f,i({ref:t},p))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3636:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const a={id:"Section 8. Set Operators",sidebar_position:8,description:"UNION, INTERSECT, MINUS"},i=void 0,s={unversionedId:"oracle/Section 8. Set Operators",id:"oracle/Section 8. Set Operators",title:"Section 8. Set Operators",description:"UNION, INTERSECT, MINUS",source:"@site/docs/oracle/8_set-operators.md",sourceDirName:"oracle",slug:"/oracle/Section 8. Set Operators",permalink:"/learning/docs/oracle/Section 8. Set Operators",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/oracle/8_set-operators.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{id:"Section 8. Set Operators",sidebar_position:8,description:"UNION, INTERSECT, MINUS"},sidebar:"tutorialSidebar",previous:{title:"Section 7. Subquery",permalink:"/learning/docs/oracle/Section 7. Subquery"},next:{title:"Section 9. More on Groupings",permalink:"/learning/docs/oracle/Section 9. More on Groupings"}},c={},l=[{value:"UNION",id:"union",level:2},{value:"Oracle UNION vs. JOIN",id:"oracle-union-vs-join",level:3},{value:"INTERSECT",id:"intersect",level:2},{value:"MINUS",id:"minus",level:2}],p={toc:l};function u(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"union"},"UNION"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"UNION")," operator is a set operator that combines result sets of two or more ",(0,o.kt)("inlineCode",{parentName:"p"},"SELECT")," statements into a single result set."),(0,o.kt)("p",null,"By default, the ",(0,o.kt)("inlineCode",{parentName:"p"},"UNION")," operator returns the unique rows from both result sets. If you want to retain the duplicate rows, you explicitly use ",(0,o.kt)("inlineCode",{parentName:"p"},"UNION ALL")),(0,o.kt)("h3",{id:"oracle-union-vs-join"},"Oracle UNION vs. JOIN"),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"UNION")," places a result set on top another, meaning that it appends result sets vertically. However, a join such as ",(0,o.kt)("inlineCode",{parentName:"p"},"INNER JOIN")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"LEFT JOIN")," combines result sets horizontally."),(0,o.kt)("p",null,(0,o.kt)("img",{src:r(5416).Z,width:"600",height:"281"})),(0,o.kt)("h2",{id:"intersect"},"INTERSECT"),(0,o.kt)("p",null,"The Oracle ",(0,o.kt)("inlineCode",{parentName:"p"},"INTERSECT")," operator compares the result of two queries and returns the distinct rows that are output by both queries."),(0,o.kt)("p",null,(0,o.kt)("img",{src:r(788).Z,width:"608",height:"181"})),(0,o.kt)("h2",{id:"minus"},"MINUS"),(0,o.kt)("p",null,"The Oracle ",(0,o.kt)("inlineCode",{parentName:"p"},"MINUS")," operator compares two queries and returns distinct rows from the first query that are not output by the second query. In other words, the ",(0,o.kt)("inlineCode",{parentName:"p"},"MINUS")," operator subtracts one result set from another."),(0,o.kt)("p",null,(0,o.kt)("img",{src:r(9918).Z,width:"615",height:"175"})))}u.isMDXComponent=!0},5416:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/2022-05-30-22-27-14-7ce925bcc811edfd767d6860fcb139fd.png"},788:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/2022-05-30-22-28-15-629e15c03935bc0a46742c43f46f2349.png"},9918:(e,t,r)=>{r.d(t,{Z:()=>n});const n=r.p+"assets/images/2022-05-30-22-29-10-3c11065ac3c8168d5342ce4d9adbf924.png"}}]);